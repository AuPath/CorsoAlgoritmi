* ALGORITMI

** Programmazione dinamica

*** Introduzione
   
   L' idea è quella di non dover ripetere calcoli già fatti in precedenza, cosa che succede per 
   molto di frequente in un albero di chiamate ricorsive.
   Una soluzione è quella di "salvare" soluzioni a problemi intermedi in una struttura di supporto
   è di controllare se un particolare calcolo è già stato fatto.
   I problemi risolti dalla programmazione dinamica hanno la caratteristica di essere facilmente
   risolvibili per "piccole" istanze del problema, praticamente l'analogo del caso base in una soluzione ricorsiva.
   Combinando soluzioni intermedie piu semplici da risolvere si ottiene la soluzione dell' istanza completa (e più complessa)
   del problema originale.

*** Approccio al problema
    
    Cominciare definendo l' istanza del problema e la soluzione del problema in maniera formale.
    Può essere utile, ma non è obbligatorio, definire l' equazione di ricorrenza del problema.
    Anche se in seguito si utilizzerà un approccio di programmazione dinamica questo passaggio ci permette di 
    individuare il caso base e lo step per ipoteticamente raggiungere la soluzione.
    
    Una volta individuata la struttura di supporto più appropriata per il problema definire cosa
    la struttura contiente ad una particolare posizione.
    Generalmente contiene la soluzione fino a il/i carattere/i della sequenza/sequenze corrispondente alla
    posizione della struttura di supporto. Molto importante è definire se la soluzione include o meno il carattere.
    
*** Algoritmi visti in classe

**** Longest increasing subsequence (LIS)
     
     Avendo una sequenza *X* di lunghezza *n* con indice *I* = {1,...,n}, \\
     una sottosequenza *Z* di *X* viene ritenuta valida se gli indici degli elementi
     di *X* che la compongono rispettano un ordine strettamente crescente.

     Esempio: \\
     *X* = < a, b, c, d >  *Z* = < a, c , d > è valida \\
     *X* = < a, b, c, d >  *Z* = < d, a, b, c > non è valida \\

     Vogliamo trovare la più lunga sottosequenza dove ogni elemento è maggiore del precedente (LIS).\\
     L' algoritmo visto in classe si limita a trovare la lunghezza della LIS. \\
     
     Istanza del problema: \\
     Una sequenza *X* di elementi, la lunghezza di *X* è *n* \\

     Soluzione del problema: \\
     - Se voglio la LIS:
       Una permutazione di *Z* di *X* tale che: \\
       - Tra tutte le permutazioni possibili di *X* (insieme delle parti) *Z* risulta la sottosequenza (deve rispettare le proprietà di una sottosequenza) quello con lunghezza (cardinalità) massima. 
       - Gli elementi della sottosequenza "ottima" *Z* devono essere ordinati in senso strettamente crescente.
	 
     
     

     
     
    

