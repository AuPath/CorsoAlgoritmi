#+STARTUP: entitiespretty
#+OPTIONS: H:10
#+OPTIONS: toc:10

* ALGORITMI

** Programmazione dinamica

*** Introduzione
   
   L' idea è quella di non dover ripetere calcoli già fatti in precedenza, cosa che succede per 
   molto di frequente in un albero di chiamate ricorsive.
   Una soluzione è quella di "salvare" soluzioni a problemi intermedi in una struttura di supporto
   è di controllare se un particolare calcolo è già stato fatto.
   I problemi risolti dalla programmazione dinamica hanno la caratteristica di essere facilmente
   risolvibili per "piccole" istanze del problema, praticamente l'analogo del caso base in una soluzione ricorsiva.
   Combinando soluzioni intermedie piu semplici da risolvere si ottiene la soluzione dell' istanza completa (e più complessa)
   del problema originale.


*** Approccio al problema
    
    Cominciare definendo l' istanza del problema e la soluzione del problema in maniera formale.
    Può essere utile, ma non è obbligatorio, definire l' equazione di ricorrenza del problema.
    Anche se in seguito si utilizzerà un approccio di programmazione dinamica questo passaggio ci permette di 
    individuare il caso base e lo step per ipoteticamente raggiungere la soluzione.
    
    Una volta individuata la struttura di supporto più appropriata per il problema definire cosa
    la struttura contiente ad una particolare posizione.
    Generalmente contiene la soluzione fino a il/i carattere/i della sequenza/sequenze corrispondente alla
    posizione della struttura di supporto. Molto importante è definire se la soluzione include o meno il carattere.
    

*** Algoritmi visti in classe
    
**** Longest increasing subsequence (LIS)
     
***** Definizione del problema

     Avendo una sequenza *X* di lunghezza *n* con indice *I* = {1,...,n}, \newline
     una sottosequenza *Z* di *X* viene ritenuta valida se gli indici degli elementi
     di *X* che la compongono rispettano un ordine strettamente crescente. \newline

     Esempio:
     *X* = < a, b, c, d >  *Z* = < a, c , d > è valida \newline
     *X* = < a, b, c, d >  *Z* = < d, a, b, c > non è valida \newline

     Vogliamo trovare la più lunga sottosequenza dove ogni elemento è maggiore del precedente (LIS).\newline
     L' algoritmo visto in classe si limita a trovare la lunghezza della LIS. \newline
     
     Istanza del problema: \newline
     Una sequenza *X* di elementi, la lunghezza di *X* è *n*

     Soluzione del problema: \newline
     - Se voglio la LIS: \newline 
       Una permutazione di *Z* di *X* tale che:
       1. Tra tutte le permutazioni possibili di *X* (insieme delle parti) *Z* risulta la sottosequenza (deve rispettare le proprietà di una sottosequenza) quello con lunghezza (cardinalità) massima. 
       2. Gli elementi della sottosequenza "ottima" *Z* devono essere ordinati in senso strettamente crescente.

     - Se voglio la lunghezza della LIS: \newline
       La lunghezza l \in *N* della sottosequenza *Z* definita sopra.
	 


***** Pseudocodice con spiegazione

      Come struttura di supporto viene utilizzato un array *L* di dimensione uguale alla
      lunghezza *n* della sequenza *S*.
      Alla posizione *i* il vettore *L* contiene la lunghezza massima della LIS fino al
      carattere *i* della sequenza *S* con S[i] compreso.

      Genericamente L[i] può avere valore:
      - L[i] = 1 se i = 1\newline
	cioè al primo elemento della sequenza la lunghezza massima possibile è 1.
      - L[i] = 1 + MAX{L[i]} se 1 \leq j \leq i-1 AND S[j] < S[i] \newline
	cioè se l'elemento *i* di *S* risulta maggiore dei precedenti il valore in *L* alla posizione *i*
	è uguale al valore massimo precedentemente trovato + 1, appunto perchè è stato possibile aggiungere
	un nuovo elemento alla LIS fino a *i*.
	
      Praticamente quello che l' algoritmo fa è:
      1. imposto a 1 la lunghezza massima della LIS fino a *i* = 1.
      2. scorro S e per ogni elemento controllo se è maggiore dell' elemento precedente che mi permette
	 di ottenere la LIS massima, questo dato lo trovo in *L*. 
      3. Se non trovo nessun elemento precedente L[i] sarà 1, se lo trovo sarà max + 1.
      4. Dopo aver controllato ogni elemento controllo se la LIS terminante con lui ha lunghezza maggiore della
	 LIS massima trovata fino ad ora, se è maggiore aggiorno il valore massimo.

      Soluzione vista a lezione:
      #+BEGIN_SRC C++ -n 
      int LIS (S[1,...,n])
      L[1] = 1;
      max_tot = 1;
      for i = 2 to n
        max = 0;
	for j = 1 to i-1
	if S[j] < S[i] AND L[j] > max
	  max = L[J]
      	L[i] = 1 + max;
	if L[i] > max_tot
	  max_tot = L[i]

      return max_tot
      #+END_SRC


***** Implementazione C++

#+BEGIN_SRC C++ -n
int lis(int sequence[], int size){
  // support array, at pos i will hold longest lis including i
  int l[size]; 
  int max_length = 1;
  l[0] = 1;

  for(int i = 1; i < size; ++i)
    {
      int max = 0;
      for(int j = 0; j <= i-1; ++j)
	if(sequence[i] > sequence[j] && l[j] > max)
	  max = l[j];

      l[i] = 1 + max;
      if(l[i] > max_length)
	max_length = l[i];
    }
  
  return max_length;
}
#+END_SRC


**** Longest common subsequence (LCS)


**** Knapsack problem

***** Definizione del problema 
      
      Abbiamo un knapsack (zaino) con una capacità *L* \in *N*.
      Abbiamo un insieme di oggetti *O* di lunghezza *n* \in *N*.
      Ad ogni oggetto è associato un Valore  v_{i} \in *V* la cui lunghezza è *n*.
      Ad ogni oggetto è associato un Peso w_{i} \in *W* la cui lunghezza è *n*.
      Definisco una funzione valore(X) {1,...,n} \rarr N che mi restituisce il valore totale di un insieme.
      La soluzione *S* \sube *O* con \sum w_{i} con 1 \le i \le L tale che valore(*S*) = MAX(valore(\weierp(O)))    
      
      L'algoritmo visto in classe ritorna il valore massimo ottenibile.


      
***** Pseudocodice e spiegazione
      
      Come struttura di supporto viene utilizzata una matrice di dimensione *n+1* x *L+1*.
      Viene aggiunto 1 perchè rappresenteremo anche l'oggetto e la capacità 0.
      
      Su ogni colonna mettiamo tutti i numeri da 0 a *L*.
      Su ogni riga tutti i numeri da 0 a *n*.
      Alla posizione [i][j] troviamo il massimo valore ottenibile prendendo i oggetti avendo capacità j.
      
      I passi dell'algoritmo:
      1. Inizializzo la matrice iniziale
      2. Se la capacità che sto considerando (j) è minore del peso dell'oggetto significa
	 che non posso prendere l'oggetto i. Il valore [i][j] sarà allora il massimo valore che posso ottenere
	 con la stessa capacità j ma con un oggetto in meno (i-1).
      3. Se la capacità è invece maggiore devo considerare se ci "guadagno" a prendere il nuovo oggetto.
	 Controllo il valore massimo ottenibile senza prendere l'oggetto e lo confronto con il valore ottenuto
	 aggiungendo il nuovo oggetto.
      4. Ritorno il valore massimo ottenibile.

      
      #+BEGIN_SRC C++ -n
      for i=0 to n
        OPT[i][0] = 0
      for j=0 to L
        OPT[0][j] = 0

      for i=1 to n
        for j = 1 to L
          if j < W[i]
	    OPT[i][j] = OPT[i-1][j]
          else if OPT[i-1][j] > ( OPT[i-1][j - W[i]] + V[i] )
	    OPT[i][j] = OPT[i-1][j]
          else
	    OPT[i][j] = OPT[i-1][j - W[i] + V[i]

     return OPT[n][L]
      #+END_SRC


***** Implementazione C++
      
      #+BEGIN_SRC C++ -n
int knapsack(int sackCapacity, char objects[], int oSize,
int values[], int vSize, int weigth[], int wSize){

assert(oSize == vSize);
assert(vSize == wSize);
assert(sackCapacity >= 0);

// add 0 value in matrix
oSize = oSize + 1;
sackCapacity = sackCapacity + 1;
int matrix[oSize][sackCapacity];
    
// initialize matrix
for(int i = 0; i < oSize; ++i)
   matrix[i][0] = 0;
for(int i = 0; i < sackCapacity; ++i)
   matrix[0][i] = 0;

// access to values and weight has to be offset by -1 because we added a
// 0 row and column to the matrix

for(int i = 1; i < oSize; ++i)
  for(int j = 1; j < sackCapacity; ++j)
    if(j < weigth[i-1])
      matrix[i][j] = matrix[i-1][j];
    else if (matrix[i-1][j] > (matrix[i-1][j - weigth[i-1]]) + values[i-1])
      matrix[i][j] = matrix[i-1][j];
    else
      matrix[i][j] = matrix[i-1][j - weigth[i-1]] + values[i-1];

    std::cout << "value matrix:" << std::endl;
    for(int i = 0; i < oSize; ++i)
      {
	for(int j = 0; j < sackCapacity; ++j)
	  std::cout << matrix[i][j] << " ";
	std::cout << std::endl;	
      }
    
    return matrix[oSize-1][sackCapacity-1];
	
  }
      #+END_SRC


** Programmazione greedy





